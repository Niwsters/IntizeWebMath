describe("WebMath", function() {
	
	testExercise = function() {
		
		it("renders answer input", function() {
			expect(exists(this.answerInput)).toBeTruthy();
		});
		
		it("renders instructions container", function() {
			expect(exists(this.instructionsField)).toBeTruthy();
		});
		
		it("renders any instructions", function() {
			expect(isEmpty($(this.instructionsField))).toBeFalsy();
		});
		
		it("renders its exercise instruction", function() {
			expect($(this.instructionsField).text()).toEqual(WebMath.getCurrentExercise().getInstructions());
		});
		
		it("renders submit button", function() {
			expect(exists(this.submitButton)).toBeTruthy();
		});
		
		it("renders submit button with value submit", function() {
			expect(this.submitButton.text()).toEqual('Submit');
		});
		
		it("has feedback field", function() {
			expect(exists(this.feedbackField)).toBeTruthy();
		});
		
		it("checks whether submitted answer is correct", function() {
			this.answerInput.val(WebMath.getCurrentExercise().getAnswer());
			this.submitButton.click();
			
			expect(this.feedbackField.text()).toEqual('Correct!');
		});
	};
	
	beforeEach(function() {
		this.answerInput = $('input.iwm_answer');
		this.submitButton = $('button.iwm_submit');
		this.instructionsField = $('.iwm_instructions');
		this.feedbackField = $('.iwm_feedback');
		this.chooseAdditionButton = $('button.iwm_choose_addition');
	});
	
	describe(",Globally,", function() {
		it("has a working start function", function() {
			expect(function() { WebMath.start() }).not.toThrow();
		});
		
		it("has an exercise object", function() {
			expect(typeof(WebMath.getCurrentExercise()) == 'object').toBeTruthy();
		});
		
		it("has a working getAllElements function", function() {
			expect(function() { WebMath.getAllElements() }).not.toThrow();
		});
		
		it("gives all elements", function() {
			expect(WebMath.getAllElements()).toEqual(WebMath.elements);
		});
		
		it("resets when start function is called twice", function() {
			WebMath.start();
			WebMath.start();
			
			elements = WebMath.getAllElements();
			for(element in elements) {
				expect($('.' + elements[element].attr('class')).length > 1).toBeFalsy();
			};
		});
	});
	
	/* describe("WebMath addition exercise", function() {
		
		beforeEach(function() {
			WebMath.restart();
			this.chooseAdditionButton.click();
		});
		
		it("has a choose addition button", function() {
			expect(exists(this.chooseAdditionButton)).toBeTruthy();
		});
		
		it("has a choose addition button with correct label", function() {
			expect(this.chooseAdditionButton.text()).toEqual("Addition");
		});
		
		it("has a choose button that switches to addition", function() {
			flunk("TODO");
		});
		
		testExercise();
		
		it("checks whether submitted answer is incorrect", function() {
			var ans = 1 + Math.floor(Math.random());
			while(ans == WebMath.getCurrentExercise().getAnswer()) {
				ans = 1 + Math.floor(Math.random());
			}
			this.answerInput.val(ans);
			this.submitButton.click();
			
			expect(this.feedbackField.text()).toEqual('Incorrect!');
		});
	});
	
	describe("WebMath subtraction exercise", function() {
		
	}); */
});

describe("Exercise", function() {
	
	describe("Addition", function() {
		beforeEach(function() {
			this.exercise = Exercise.getAdditionExercise();
		});
		
		it("has instructions", function() {
			expect(this.exercise.getInstructions().length > 0).toBeTruthy();
		});
		
		it("has answer in the form of a number", function() {
			expect(isNaN(this.exercise.getAnswer())).toBeFalsy();
		});
		
		it("gives instructions on the form x + b = 0", function() {
			expect(this.exercise.getInstructions()).toMatch(/\b[a-z] \+ [1-9][0-9]* = 0/);
		});
		
		it("has correct answer", function() {
			answer = this.exercise.getAnswer();
			instruction = this.exercise.getInstructions();
			getB = /\b[a-z] \+ ([1-9][0-9]*)/
			b = parseInt(instruction.match(/[1-9][0-9]*/));
			correctAnswer = -b;
			expect(answer).toEqual(correctAnswer);
		});
	});
	
	describe("Subtraction", function() {
		beforeEach(function() {
			this.exercise = Exercise.getSubtractionExercise();
		});
		
		it("has instructions", function() {
			expect(this.exercise.getInstructions().length > 0).toBeTruthy();
		});
		
		it("has answer in the form of a number", function() {
			expect(isNaN(this.exercise.getAnswer())).toBeFalsy();
		});
		
		it("gives instructions on the form x - b = 0", function() {
			expect(this.exercise.getInstructions()).toMatch(/\b[a-z] \- [1-9][0-9]* = 0/);
		});
		
		it("has correct answer", function() {
			answer = this.exercise.getAnswer();
			instruction = this.exercise.getInstructions();
			getB = /\b[a-z] \- ([1-9][0-9]*)/
			b = parseInt(instruction.match(/[1-9][0-9]*/));
			correctAnswer = b;
			expect(answer).toEqual(correctAnswer);
		});
	});
});
